// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

edition = "2023";

package arcs;

import "third_party/java/arcs/annotation.proto";

option features.field_presence = IMPLICIT;
option java_package = "arcs.core.data.proto";
option java_multiple_files = true;

// Defines a data usage policy.
message PolicyProto {
  // Policy name.
  string name = 1;

  // Targets governed by the policy.
  repeated PolicyTargetProto targets = 2;

  // Additional config metadata for the policy.
  repeated PolicyConfigProto configs = 3;

  // Human readable description for the policy.
  string description = 4;

  // Egress type permitted by the policy.
  string egress_type = 7;

  // Annotations on the policy.
  repeated AnnotationProto annotations = 6;

  reserved 5;
}

message PolicyTargetProto {
  // Schema type of the store targeted by the policy.
  string schema_type = 1;

  // The maximum age of the data that can be used, as a duration (not timestamp)
  // in milliseconds.
  int64 max_age_ms = 2;

  // Valid retention options for storing the target data.
  repeated PolicyRetentionProto retentions = 3;

  // Allowed usages for all fields in this target type.
  repeated PolicyFieldProto fields = 4;

  // Annotations on the policy target.
  repeated AnnotationProto annotations = 5;
}

message PolicyFieldProto {
  // Field name.
  string name = 1;

  enum UsageType {
    USAGE_TYPE_UNSPECIFIED = 0;

    // Can be used for anything.
    ANY = 1;

    // Can be egressed.
    EGRESS = 2;

    // Can be used in joins, but not read.
    JOIN = 3;
  }

  message AllowedUsage {
    // The type of usage that is permitted.
    UsageType usage = 1;

    // An redaction label that must be applied before the data can be used for
    // this usage type. Optional: an empty string means no redaction is
    // required.
    string redaction_label = 2;
  }

  // Specifies the allowed usages of raw data.
  repeated AllowedUsage usages = 2;

  // Specified usages for subfields nested inside this field.
  repeated PolicyFieldProto subfields = 4;

  // Annotations on the policy field.
  repeated AnnotationProto annotations = 5;
}

// Storage retention options for a policy target.
message PolicyRetentionProto {
  enum Medium {
    MEDIUM_UNSPECIFIED = 0;
    RAM = 1;
    DISK = 2;
  }

  // Allowed retention medium.
  Medium medium = 1;

  // Whether encryption is required when using this medium.
  bool encryption_required = 2;
}

// Encode additional metadata for a policy.
message PolicyConfigProto {
  // Name for the config.
  string name = 1;

  // Data contained in the config. This encodes arbitrary metadata as string
  // key-value pairs. The keys should all have a known meaning given the config
  // name.
  map<string, string> metadata = 2;
}
